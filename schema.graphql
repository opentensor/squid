# type Account @entity {
#   "Account address"
#   id: ID!
#   hotkeys: [Hotkey!]! @derivedFrom(field: "account")
#   transfersFrom: [Transfer!]! @derivedFrom(field: "from")
#   transfersTo: [Transfer!]! @derivedFrom(field: "to")
#   balance: BigInt!
#   blockNum: Int!
# }


# type Hotkey @entity {
#   "Hotkey address"
#   id: ID!
#   account: Account!
#   uid: Int!
#   blockNum: Int!
# }

# type Neuron @entity {
#   "Neuron address"
#   id: ID!
#   coldkeyAddress: String!
#   hotkeyAddress: String!
#   uid: Int!
#   stake: BigInt!
#   rank: BigInt!
#   incentive: BigInt!
#   trust: BigInt!
#   consensus: BigInt!
#   dividends: BigInt!
#   emission: BigInt!
#   ip: BigInt!
#   port: Int!
#   version: Int!
#   lastUpdated: BigInt!
#   blockNum: Int!
#   createdAt: DateTime!
# }



type Transfer @entity {
  "Transfer ID"
  id: ID!
  from: Coldkey!
  to: Coldkey!
  amount: BigInt!
  blockNum: Int!
}


type Coldkey @entity {
  "Coldkey address"
  id: ID!
  transferFrom: [Transfer!]! @derivedFrom(field: "from")
  transferTo: [Transfer!]! @derivedFrom(field: "to")
  balance: BigInt!
  blockNum: Int!
}

type Hotkey @entity {
  "Hotkey address"
  id: ID!
  blockNum: Int!
}

type Neuron @entity {
  "Neuron address"
  id: ID!
  coldkey: Coldkey!
  hotkey: Hotkey!
  uid: Int!
  stake: BigInt!
  rank: BigInt!
  incentive: BigInt!
  trust: BigInt!
  consensus: BigInt!
  dividends: BigInt!
  emission: BigInt!
  ip: BigInt!
  port: Int!
  version: Int!
  lastUpdated: BigInt!
  blockNum: Int!
}
